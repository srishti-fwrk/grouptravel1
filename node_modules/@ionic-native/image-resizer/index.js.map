{"version":3,"sources":["../../../src/@ionic-native/plugins/image-resizer/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,OAAA,EAAS,MAAA,EAAQ,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AAsCxE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6BG;AASH;IAAkC,gCAAiB;IAAnD;;IAYA,CAAC;IAXC;;OAEG;IAEH,6BAAM,GAAN,UAAO,OAA4B,IAAkB,MAAM,CAAC,CAAC,CAAC;IACzD,uBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,2BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IANA;QADC,OAAO,EAAE;;;;8CACoD;IALnD,YAAY;QARxB,MAAM,CAAC;YACN,UAAU,EAAE,cAAc;YAC1B,MAAM,EAAE,4BAA4B;YACpC,SAAS,EAAE,cAAc;YACzB,IAAI,EAAE,+DAA+D;YACrE,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,EAAE,SAAS,CAAC;SACzC,CAAC;OAEW,YAAY,CAYxB;IAAD,mBAAC;CAZD,AAYC,CAZiC,iBAAiB,GAYlD;SAZY,YAAY","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, Plugin, IonicNativePlugin } from '@ionic-native/core';\n\nexport interface ImageResizerOptions {\n  /**\n   * The URI for the image on the device to get scaled\n   */\n  uri: string;\n\n  /**\n   * The width of the new image\n   */\n  width: number;\n\n  /**\n   * The height of the new image\n   */\n  height: number;\n\n  /**\n   * The name of the folder the image should be put\n   * (Android only)\n   */\n  folderName?: string;\n\n  /**\n   *\n   * Quality given as Number for the quality of the new image\n   * (Android and iOS only)\n   */\n  quality?: number;\n\n  /**\n   * A custom name for the file. Default name is a timestamp\n   * (Android and Windows only)\n   */\n  fileName?: string;\n}\n\n/**\n * @name Image Resizer\n * @description\n * Cordova Plugin For Image Resize\n *\n * @usage\n * ```typescript\n * import { ImageResizer, ImageResizerOptions } from '@ionic-native/image-resizer';\n *\n * constructor(private imageResizer: ImageResizer) { }\n *\n * ...\n *\n * let options = {\n *  uri: uri,\n *  folderName: 'Protonet',\n *  quality: 90,\n *  width: 1280,\n *  height: 1280\n * } as ImageResizerOptions;\n *\n * this.imageResizer\n *   .resize(options)\n *   .then((filePath: string) => console.log('FilePath', filePath))\n *   .catch(e => console.log(e));\n *\n * ```\n * @interfaces\n * ImageResizerOptions\n */\n@Plugin({\n  pluginName: 'ImageResizer',\n  plugin: 'info.protonet.imageresizer',\n  pluginRef: 'ImageResizer',\n  repo: 'https://github.com/JoschkaSchulz/cordova-plugin-image-resizer',\n  platforms: ['Android', 'iOS', 'Windows']\n})\n\nexport class ImageResizer extends IonicNativePlugin {\n  /**\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  resize(options: ImageResizerOptions): Promise<any> { return; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}