var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, Input } from '@angular/core';
import { OpenWeatherMapProvider } from '../providers/openweathermap-provider';
export var OpenWeatherMap = (function () {
    function OpenWeatherMap(openweathermapProvider) {
        this.openweathermapProvider = openweathermapProvider;
    }
    OpenWeatherMap.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.openweathermapProvider.load(this.options)
            .then(function (data) {
            _this.openweathermapProvider.setWindSpeed(data.wind.speed);
            _this.openweathermapProvider.setTemperature(data.main.temp);
            _this.openweathermapProvider.setHumidity(data.main.humidity);
            _this.openweathermapProvider.setMaxTemp(data.main.temp_max);
            _this.openweathermapProvider.setMinTemp(data.main.temp_min);
            _this.openweathermapProvider.setAthmosphericPressure(data.main.pressure);
            _this.openweathermapProvider.setWeatherGroup(data.weather[0].main);
            _this.openweathermapProvider.setWeatherDescription(data.weather[0].description);
        });
    };
    __decorate([
        Input('options'), 
        __metadata('design:type', Object)
    ], OpenWeatherMap.prototype, "options", void 0);
    OpenWeatherMap = __decorate([
        Component({
            selector: 'openweathermap',
            styles: ["\n    .content-box {\n      font-family: 'Open Sans', sans-serif;\n      font-size:1.5rem;\n    }\n  "],
            template: "<div class=\"content-box\"> \n      <p id=\"weatherDescription\">{{openweathermapProvider.weatherDescription}}</p>\n      <p id=\"weatherGroup\">{{openweathermapProvider.weatherGroup}}</p>\n      <p id=\"temperature\">{{openweathermapProvider.temperature}}\u00B0</p>\n      <p id=\"windSpeed\">{{openweathermapProvider.windSpeed}} Km/h</p>\n      <p id=\"humidity\">{{openweathermapProvider.humidity}}%</p>\n      <p id=\"maxTemp\">{{openweathermapProvider.minTemp}}\u00B0</p> \n      <p id=\"minTemp\">{{openweathermapProvider.maxTemp}}\u00B0</p> \n      <p id=\"pressure\">{{openweathermapProvider.athmosphericPressure}} hPa</p></div>",
            providers: [OpenWeatherMapProvider]
        }), 
        __metadata('design:paramtypes', [OpenWeatherMapProvider])
    ], OpenWeatherMap);
    return OpenWeatherMap;
}());
//# sourceMappingURL=openweathermap.js.map