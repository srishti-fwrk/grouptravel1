var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable } from '@angular/core';
import { Http } from '@angular/http';
import 'rxjs/add/operator/map';
export var OpenWeatherMapProvider = (function () {
    function OpenWeatherMapProvider(http) {
        this.http = http;
        this.apiURl = "http://api.openweathermap.org/data/2.5/weather?";
        this.city = "";
        this.unitFormat = "metric";
        this.lang = "en";
        this.data = null;
    }
    OpenWeatherMapProvider.prototype.load = function (options) {
        var _this = this;
        this.apiURl = this.formAPIUrl(options);
        if (this.data) {
            return Promise.resolve(this.data);
        }
        return new Promise(function (resolve) {
            _this.http.get(_this.apiURl)
                .map(function (res) { return res.json(); })
                .subscribe(function (data) {
                _this.data = data;
                resolve(_this.data);
            });
        });
    };
    OpenWeatherMapProvider.prototype.formCityQuery = function (cityParams) {
        var query;
        if (cityParams.hasOwnProperty('name')) {
            query = "q=" + cityParams['name'][0];
        }
        if (cityParams.hasOwnProperty('geo')) {
            var coordinates = cityParams['geo'];
            if (coordinates[0]) {
                query = "lat=" + coordinates[0]['lat'] + '&lon=' + coordinates[0]['lon'];
            }
        }
        if (cityParams.hasOwnProperty('zip')) {
            var zip = cityParams['zip'];
            if (zip[0]) {
                query = "zip=" + zip[0]['code'] + ',' + zip[0]['country'];
            }
        }
        return query;
    };
    OpenWeatherMapProvider.prototype.formAPIUrl = function (options) {
        var paramsCity;
        var url;
        if (options.unitFormat) {
            this.unitFormat = options.unitFormat;
        }
        if (options.lang) {
            this.lang = options.lang;
        }
        if (options.city) {
            paramsCity = this.formCityQuery(options.city);
        }
        url = this.apiURl + paramsCity + '&units=' + options.unitFormat + '&lang=' + this.lang + '&appid=' + options.apikey;
        return url;
    };
    OpenWeatherMapProvider.prototype.setWindSpeed = function (windSpeed) {
        this.windSpeed = windSpeed;
    };
    OpenWeatherMapProvider.prototype.setTemperature = function (temperature) {
        this.temperature = temperature;
    };
    OpenWeatherMapProvider.prototype.setHumidity = function (humidity) {
        this.humidity = humidity;
    };
    OpenWeatherMapProvider.prototype.setMinTemp = function (minTemp) {
        this.minTemp = minTemp;
    };
    OpenWeatherMapProvider.prototype.setMaxTemp = function (maxTemp) {
        this.maxTemp = maxTemp;
    };
    OpenWeatherMapProvider.prototype.setAthmosphericPressure = function (athmosphericPressure) {
        this.athmosphericPressure = athmosphericPressure;
    };
    OpenWeatherMapProvider.prototype.setWeatherGroup = function (weatherGroup) {
        this.weatherGroup = weatherGroup;
    };
    OpenWeatherMapProvider.prototype.setWeatherDescription = function (weatherDescription) {
        this.weatherDescription = weatherDescription;
    };
    OpenWeatherMapProvider = __decorate([
        Injectable(), 
        __metadata('design:paramtypes', [(typeof (_a = typeof Http !== 'undefined' && Http) === 'function' && _a) || Object])
    ], OpenWeatherMapProvider);
    return OpenWeatherMapProvider;
    var _a;
}());
//# sourceMappingURL=openweathermap-provider.js.map